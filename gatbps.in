#!/bin/sh

LC_ALL=C
export LC_ALL

#
# This case statement does all of our options parsing. We only support
# '--help', '--version', and '--', and we don't allow mixing arguments
# with options (e.g. in 'gatbps splat --help', '--help' is taken as an
# argument, not as an option). These simple rules let us implement the
# parsing with what is essentially just a single if-else chain on ${1}.
#
# Most of the work is in mimicking glibc's getopt_long behavior, which
# serves as our reference point. There are a variety of error messages
# that are a bit tedious to implement.
#
# Both '--help' and '--version' are handled immediately, and cause any
# later arguments to be ignored (e.g. in 'gatbps --help foo', 'foo' is
# ignored because '--help' exits the script). '--' is handled by being
# shifted away. If we get past the case statement, then the remaining
# arguments are the files to be created.
#
# Having no arguments does not need special treatment. ${1} will expand
# to nothing, which is equivalent to having a single empty argument. It
# will still need special treatment after the options parsing, though.
#

case "${1}" in

  --help|--hel|--he|--h)
    cat <<'EOF'
Usage: gatbps [FILE]...
Create project management files.

Each FILE is classified by its name as either regular or special. There
is a fixed list of special FILE names, which is printed if no arguments
are given. Any other FILE is regular.

Each regular FILE is created by adding startup and shutdown code to
FILE.texi and calling texi2any --plaintext. If FILE.top exists, it is
prepended to FILE. Otherwise, if FILE.top.texi exists, it is processed
in the same way as FILE.texi and prepended to FILE. The same action is
taken for FILE.bot(.texi), but appending to FILE instead of prepending.

Each special FILE is filled with either preset code or information
collected from version control. Among other things, this allows for the
creation of a version string, release date, authors list, and changelog.

Try 'man gatbps' or 'info gatbps' for more information.
EOF
    case "${?}" in
      0)
        exit 0
        ;;
    esac
    exit 1
    ;;

  --version|--versio|--versi|--vers|--ver|--ve|--v)
    cat <<'EOF'
gatbps (GATBPS) @PACKAGE_VERSION@
This version was released on @PACKAGE_DATE@.
The authors of this script have waived all copyright and
related or neighboring rights to the extent permitted by
law as described by the CC0 1.0 Universal Public Domain
Dedication. You should have received a copy of the full
dedication along with this script, typically as a file
named <CC0-1.0.txt>. If not, it may be available at
<https://creativecommons.org/publicdomain/zero/1.0/>.
EOF
    case "${?}" in
      0)
        exit 0
        ;;
    esac
    exit 1
    ;;

  --)
    shift
    ;;

  --help=*|--hel=*|--he=*|--h=*)
    cat >&2 <<'EOF'
gatbps: option '--help' doesn't allow an argument
Try 'gatbps --help' for more information.
EOF
    exit 1
    ;;

  --version=*|--versio=*|--versi=*|--vers=*|--ver=*|--ve=*|--v=*)
    cat >&2 <<'EOF'
gatbps: option '--version' doesn't allow an argument
Try 'gatbps --help' for more information.
EOF
    exit 1
    ;;

  --=*)
    cat >&2 <<EOF
gatbps: option '${1}' is ambiguous; possibilities: '--help' '--version'
Try 'gatbps --help' for more information.
EOF
    exit 1
    ;;

  --*|-?)
    cat >&2 <<EOF
gatbps: unrecognized option '${1}'
Try 'gatbps --help' for more information.
EOF
    exit 1
    ;;

  -?*)
    option=`expr "X${1}" : 'X\(-.\)' 2>/dev/null`
    case "${?}" in
      0)
        case "${option}" in
          -)
            option='-
'
            ;;
        esac
        cat >&2 <<EOF
gatbps: unrecognized option '${option}'
Try 'gatbps --help' for more information.
EOF
        ;;
      *)
        cat >&2 <<EOF
gatbps: unrecognized options '${1}'
Try 'gatbps --help' for more information.
EOF
        ;;
    esac
    exit 1
    ;;

esac

#
# Handle the no arguments case. This includes the 'gatbps --' case, as
# the above code shifts away the '--'.
#

case "${#}" in
  0)
    cat <<'EOF'
CC0-1.0.txt
EOF
    case "${?}" in
      0)
        exit 0
        ;;
    esac
    exit 1
    ;;
esac

gatbps_do_texi_helper() {
  cat <<'EOF' >"${2}.gatbps1" || return 1
\input texinfo
@setfilename foo
@settitle foo
@documentencoding UTF-8
EOF
  cat "${1}" >>"${2}.gatbps1" || return 1
  cat <<'EOF' >>"${2}.gatbps1" || return 1
@bye
EOF

  #
  # Using texi2any --plaintext --output foo bar where foo is a directory
  # outputs to foo/bar.txt with texi2any (GNU texinfo) 6.0. We want this
  # to fail, so we use redirection instead.
  #

  texi2any --plaintext "${2}.gatbps1" >"${2}" || return 1

  rm -f "${2}.gatbps1"
  return 0
}

gatbps_do_texi() {
  gatbps_do_texi_helper "${1}" "${2}" && return 0
  rm -f "${2}" "${2}.gatbps1"
  return 1
}

gatbps_do_top_helper() {
  sed '/^#/d' "${1}" >"${2}" || return 1
  echo '' >>"${2}" || return 1
  return 0
}

gatbps_do_top() {
  gatbps_do_top_helper "${1}" "${2}" && return 0
  rm -f "${2}"
  return 1
}

gatbps_do_top_texi_helper() {
  gatbps_do_texi "${1}" "${2}" || return 1
  echo '' >>"${2}" || return 1
  return 0
}

gatbps_do_top_texi() {
  gatbps_do_top_texi_helper "${1}" "${2}" && return 0
  rm -f "${2}"
  return 1
}

gatbps_do_bot_helper() {
  echo '' >"${2}" || return 1
  sed '/^#/d' "${1}" >>"${2}" || return 1
  return 0
}

gatbps_do_bot() {
  gatbps_do_bot_helper "${1}" "${2}" && return 0
  rm -f "${2}"
  return 1
}

gatbps_do_bot_texi_helper() {
  echo '' >"${2}.gatbps1" || return 1
  gatbps_do_texi "${1}" "${2}.gatbps2" || return 1
  cat "${2}.gatbps1" "${2}.gatbps2" >"${2}" || return 1
  rm -f "${2}.gatbps1" "${2}.gatbps2"
  return 0
}

gatbps_do_bot_texi() {
  gatbps_do_bot_texi_helper "${1}" "${2}" && return 0
  rm -f "${2}" "${2}.gatbps1" "${2}.gatbps2"
  return 1
}

gave_up_at_least_once=0
gave_up_on() {
  gave_up_at_least_once=1
  cat <<EOF >&2
gatbps: gave up on '${1}'
EOF
}

for file do

  #
  # Give up on any ${file} that is the empty string.
  #

  case "${file}" in
    ?*)
      :
      ;;
    *)
      cat <<'EOF' >&2
gatbps: empty argument
EOF
      gave_up_on "${file}"
      continue
      ;;
  esac

  #
  # Give up on any ${file} that ends in a slash.
  #

  case "${file}" in
    */)
      cat <<EOF >&2
gatbps: '${file}' ends in a slash
EOF
      gave_up_on "${file}"
      continue
      ;;
  esac

  #
  # Set ${path} to ${file} but adjust it so that it cannot be confused
  # with program options. Note that ${path} always contains a slash and
  # that any string with ${path} as an initial substring also cannot be
  # confused with program options.
  #

  case "${file}" in
    /*)
      path="${file}"
      ;;
    *)
      path="./${file}"
      ;;
  esac

  #
  # Give up on any ${path} that is a directory. Note that getting past
  # this test does not guarantee that ${path} is not a directory since
  # the test program could fail for some other reason. POSIX says that
  # test returns 1 for false and >1 for error, but it seems like a bad
  # idea to rely on that.
  #

  if test -d "${path}"; then
    cat <<EOF >&2
gatbps: '${file}' is a directory
EOF
    gave_up_on "${file}"
    continue
  fi

  #
  # Set ${name} to the characters after the last slash of ${path}. The
  # leading 'X' is commonly recommended to prevent expr from confusing
  # operands with operators. Note that ${path} always contains a slash
  # and cannot end in a slash, so there are no tricky cases.
  #

  name=`expr "X${path}" : 'X.*/\(.*\)'`
  case "${?}" in
    0)
      :
      ;;
    *)
      gave_up_on "${file}"
      continue
      ;;
  esac

  #
  # Do the main processing based on ${name}.
  #

  case "${name}" in

    *)
      :
      ;;

  esac

done

exit "${gave_up_at_least_once}"

#
# The authors of this file have waived all copyright and
# related or neighboring rights to the extent permitted by
# law as described by the CC0 1.0 Universal Public Domain
# Dedication. You should have received a copy of the full
# dedication along with this file, typically as a file
# named <CC0-1.0.txt>. If not, it may be available at
# <https://creativecommons.org/publicdomain/zero/1.0/>.
#
